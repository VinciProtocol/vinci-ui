/* Autogenerated file. Do not edit manually. */
/* tslint:disable */

import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export type ReserveConfigurationMapStruct = { data: BigNumberish }

export type ReserveConfigurationMapStructOutput = [BigNumber] & {
  data: BigNumber
}

export type NFTVaultConfigurationMapStruct = { data: BigNumberish }

export type NFTVaultConfigurationMapStructOutput = [BigNumber] & {
  data: BigNumber
}

export type NFTVaultDataStruct = {
  configuration: NFTVaultConfigurationMapStruct
  nTokenAddress: string
  id: BigNumberish
}

export type NFTVaultDataStructOutput = [NFTVaultConfigurationMapStructOutput, string, number] & {
  configuration: NFTVaultConfigurationMapStructOutput
  nTokenAddress: string
  id: number
}

export type ReserveDataStruct = {
  configuration: ReserveConfigurationMapStruct
  liquidityIndex: BigNumberish
  variableBorrowIndex: BigNumberish
  currentLiquidityRate: BigNumberish
  currentVariableBorrowRate: BigNumberish
  currentStableBorrowRate: BigNumberish
  lastUpdateTimestamp: BigNumberish
  aTokenAddress: string
  stableDebtTokenAddress: string
  variableDebtTokenAddress: string
  interestRateStrategyAddress: string
  id: BigNumberish
}

export type ReserveDataStructOutput = [
  ReserveConfigurationMapStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  string,
  string,
  string,
  string,
  number
] & {
  configuration: ReserveConfigurationMapStructOutput
  liquidityIndex: BigNumber
  variableBorrowIndex: BigNumber
  currentLiquidityRate: BigNumber
  currentVariableBorrowRate: BigNumber
  currentStableBorrowRate: BigNumber
  lastUpdateTimestamp: number
  aTokenAddress: string
  stableDebtTokenAddress: string
  variableDebtTokenAddress: string
  interestRateStrategyAddress: string
  id: number
}

export type UserConfigurationMapStruct = {
  data: BigNumberish
  nData: BigNumberish
}

export type UserConfigurationMapStructOutput = [BigNumber, BigNumber] & {
  data: BigNumber
  nData: BigNumber
}

export interface LendingPoolInterface extends utils.Interface {
  functions: {
    'FLASHLOAN_PREMIUM_TOTAL()': FunctionFragment
    'LENDINGPOOL_REVISION()': FunctionFragment
    'MAX_NUMBER_RESERVES()': FunctionFragment
    'MAX_STABLE_RATE_BORROW_SIZE_PERCENT()': FunctionFragment
    'borrow(address,uint256,uint256,uint16,address)': FunctionFragment
    'deposit(address,uint256,address,uint16)': FunctionFragment
    'depositNFT(address,uint256[],uint256[],address,uint16)': FunctionFragment
    'finalizeNFTBatchTransfer(address,address,address,uint256[],uint256[],uint256,uint256)': FunctionFragment
    'finalizeNFTSingleTransfer(address,address,address,uint256,uint256,uint256,uint256)': FunctionFragment
    'finalizeTransfer(address,address,address,uint256,uint256,uint256)': FunctionFragment
    'getAddressesProvider()': FunctionFragment
    'getConfiguration(address)': FunctionFragment
    'getNFTVaultConfiguration(address)': FunctionFragment
    'getNFTVaultData(address)': FunctionFragment
    'getNFTVaultsList()': FunctionFragment
    'getReserveData(address)': FunctionFragment
    'getReserveNormalizedIncome(address)': FunctionFragment
    'getReserveNormalizedVariableDebt(address)': FunctionFragment
    'getReservesList()': FunctionFragment
    'getUserAccountData(address)': FunctionFragment
    'getUserConfiguration(address)': FunctionFragment
    'initNFTVault(address,address)': FunctionFragment
    'initReserve(address,address,address,address,address)': FunctionFragment
    'initialize(address)': FunctionFragment
    'paused()': FunctionFragment
    'repay(address,uint256,uint256,address)': FunctionFragment
    'setConfiguration(address,uint256)': FunctionFragment
    'setNFTVaultConfiguration(address,uint256)': FunctionFragment
    'setPause(bool)': FunctionFragment
    'setReserveInterestRateStrategyAddress(address,address)': FunctionFragment
    'withdraw(address,uint256,address)': FunctionFragment
    'withdrawNFT(address,uint256[],uint256[],address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'FLASHLOAN_PREMIUM_TOTAL', values?: undefined): string
  encodeFunctionData(functionFragment: 'LENDINGPOOL_REVISION', values?: undefined): string
  encodeFunctionData(functionFragment: 'MAX_NUMBER_RESERVES', values?: undefined): string
  encodeFunctionData(functionFragment: 'MAX_STABLE_RATE_BORROW_SIZE_PERCENT', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(functionFragment: 'deposit', values: [string, BigNumberish, string, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'depositNFT',
    values: [string, BigNumberish[], BigNumberish[], string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'finalizeNFTBatchTransfer',
    values: [string, string, string, BigNumberish[], BigNumberish[], BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'finalizeNFTSingleTransfer',
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'finalizeTransfer',
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'getAddressesProvider', values?: undefined): string
  encodeFunctionData(functionFragment: 'getConfiguration', values: [string]): string
  encodeFunctionData(functionFragment: 'getNFTVaultConfiguration', values: [string]): string
  encodeFunctionData(functionFragment: 'getNFTVaultData', values: [string]): string
  encodeFunctionData(functionFragment: 'getNFTVaultsList', values?: undefined): string
  encodeFunctionData(functionFragment: 'getReserveData', values: [string]): string
  encodeFunctionData(functionFragment: 'getReserveNormalizedIncome', values: [string]): string
  encodeFunctionData(functionFragment: 'getReserveNormalizedVariableDebt', values: [string]): string
  encodeFunctionData(functionFragment: 'getReservesList', values?: undefined): string
  encodeFunctionData(functionFragment: 'getUserAccountData', values: [string]): string
  encodeFunctionData(functionFragment: 'getUserConfiguration', values: [string]): string
  encodeFunctionData(functionFragment: 'initNFTVault', values: [string, string]): string
  encodeFunctionData(functionFragment: 'initReserve', values: [string, string, string, string, string]): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'repay', values: [string, BigNumberish, BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'setConfiguration', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setNFTVaultConfiguration', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setPause', values: [boolean]): string
  encodeFunctionData(functionFragment: 'setReserveInterestRateStrategyAddress', values: [string, string]): string
  encodeFunctionData(functionFragment: 'withdraw', values: [string, BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'withdrawNFT', values: [string, BigNumberish[], BigNumberish[], string]): string

  decodeFunctionResult(functionFragment: 'FLASHLOAN_PREMIUM_TOTAL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'LENDINGPOOL_REVISION', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MAX_NUMBER_RESERVES', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MAX_STABLE_RATE_BORROW_SIZE_PERCENT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'finalizeNFTBatchTransfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'finalizeNFTSingleTransfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'finalizeTransfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAddressesProvider', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getConfiguration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNFTVaultConfiguration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNFTVaultData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNFTVaultsList', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getReserveData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getReserveNormalizedIncome', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getReserveNormalizedVariableDebt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getReservesList', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUserAccountData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUserConfiguration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initNFTVault', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initReserve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setConfiguration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setNFTVaultConfiguration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setPause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setReserveInterestRateStrategyAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawNFT', data: BytesLike): Result

  events: {
    'Borrow(address,address,uint256,uint256,uint256)': EventFragment
    'Deposit(address,address,address,uint256)': EventFragment
    'DepositNFT(address,address,address,uint256[],uint256[])': EventFragment
    'NFTVaultUsedAsCollateralDisabled(address,address)': EventFragment
    'NFTVaultUsedAsCollateralEnabled(address,address)': EventFragment
    'Paused()': EventFragment
    'Repay(address,address,uint256)': EventFragment
    'ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)': EventFragment
    'Unpaused()': EventFragment
    'Withdraw(address,address,address,uint256)': EventFragment
    'WithdrawNFT(address,address,address,uint256[],uint256[])': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositNFT'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NFTVaultUsedAsCollateralDisabled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NFTVaultUsedAsCollateralEnabled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ReserveDataUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawNFT'): EventFragment
}

export type BorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    reserve: string
    user: string
    amount: BigNumber
    borrowRateMode: BigNumber
    borrowRate: BigNumber
  }
>

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>

export type DepositEvent = TypedEvent<
  [string, string, string, BigNumber],
  { reserve: string; user: string; onBehalfOf: string; amount: BigNumber }
>

export type DepositEventFilter = TypedEventFilter<DepositEvent>

export type DepositNFTEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  {
    vault: string
    user: string
    onBehalfOf: string
    tokenIds: BigNumber[]
    amounts: BigNumber[]
  }
>

export type DepositNFTEventFilter = TypedEventFilter<DepositNFTEvent>

export type NFTVaultUsedAsCollateralDisabledEvent = TypedEvent<[string, string], { nftVault: string; user: string }>

export type NFTVaultUsedAsCollateralDisabledEventFilter = TypedEventFilter<NFTVaultUsedAsCollateralDisabledEvent>

export type NFTVaultUsedAsCollateralEnabledEvent = TypedEvent<[string, string], { nftVault: string; user: string }>

export type NFTVaultUsedAsCollateralEnabledEventFilter = TypedEventFilter<NFTVaultUsedAsCollateralEnabledEvent>

export type PausedEvent = TypedEvent<[], {}>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export type RepayEvent = TypedEvent<[string, string, BigNumber], { reserve: string; user: string; amount: BigNumber }>

export type RepayEventFilter = TypedEventFilter<RepayEvent>

export type ReserveDataUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    reserve: string
    liquidityRate: BigNumber
    stableBorrowRate: BigNumber
    variableBorrowRate: BigNumber
    liquidityIndex: BigNumber
    variableBorrowIndex: BigNumber
  }
>

export type ReserveDataUpdatedEventFilter = TypedEventFilter<ReserveDataUpdatedEvent>

export type UnpausedEvent = TypedEvent<[], {}>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber],
  { reserve: string; user: string; to: string; amount: BigNumber }
>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export type WithdrawNFTEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  {
    vault: string
    user: string
    to: string
    tokenIds: BigNumber[]
    amounts: BigNumber[]
  }
>

export type WithdrawNFTEventFilter = TypedEventFilter<WithdrawNFTEvent>

export interface ILendingPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: LendingPoolInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    FLASHLOAN_PREMIUM_TOTAL(overrides?: CallOverrides): Promise<[BigNumber]>

    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<[BigNumber]>

    MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<[BigNumber]>

    MAX_STABLE_RATE_BORROW_SIZE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>

    borrow(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    deposit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    depositNFT(
      nft: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    finalizeNFTBatchTransfer(
      asset: string,
      from: string,
      to: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    finalizeNFTSingleTransfer(
      asset: string,
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getAddressesProvider(overrides?: CallOverrides): Promise<[string]>

    getConfiguration(asset: string, overrides?: CallOverrides): Promise<[ReserveConfigurationMapStructOutput]>

    getNFTVaultConfiguration(asset: string, overrides?: CallOverrides): Promise<[NFTVaultConfigurationMapStructOutput]>

    getNFTVaultData(asset: string, overrides?: CallOverrides): Promise<[NFTVaultDataStructOutput]>

    getNFTVaultsList(overrides?: CallOverrides): Promise<[string[]]>

    getReserveData(asset: string, overrides?: CallOverrides): Promise<[ReserveDataStructOutput]>

    getReserveNormalizedIncome(asset: string, overrides?: CallOverrides): Promise<[BigNumber]>

    getReserveNormalizedVariableDebt(asset: string, overrides?: CallOverrides): Promise<[BigNumber]>

    getReservesList(overrides?: CallOverrides): Promise<[string[]]>

    getUserAccountData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralETH: BigNumber
        totalDebtETH: BigNumber
        availableBorrowsETH: BigNumber
        currentLiquidationThreshold: BigNumber
        ltv: BigNumber
        healthFactor: BigNumber
      }
    >

    getUserConfiguration(user: string, overrides?: CallOverrides): Promise<[UserConfigurationMapStructOutput]>

    initNFTVault(
      nft: string,
      nTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    initReserve(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    initialize(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    repay(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setNFTVaultConfiguration(
      vault: string,
      configuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setPause(val: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdraw(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawNFT(
      nft: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  FLASHLOAN_PREMIUM_TOTAL(overrides?: CallOverrides): Promise<BigNumber>

  LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>

  MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<BigNumber>

  MAX_STABLE_RATE_BORROW_SIZE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>

  borrow(
    asset: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    referralCode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  deposit(
    asset: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  depositNFT(
    nft: string,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  finalizeNFTBatchTransfer(
    asset: string,
    from: string,
    to: string,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    balanceFromBefore: BigNumberish,
    balanceToBefore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  finalizeNFTSingleTransfer(
    asset: string,
    from: string,
    to: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    balanceFromBefore: BigNumberish,
    balanceToBefore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  finalizeTransfer(
    asset: string,
    from: string,
    to: string,
    amount: BigNumberish,
    balanceFromBefore: BigNumberish,
    balanceToBefore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getAddressesProvider(overrides?: CallOverrides): Promise<string>

  getConfiguration(asset: string, overrides?: CallOverrides): Promise<ReserveConfigurationMapStructOutput>

  getNFTVaultConfiguration(asset: string, overrides?: CallOverrides): Promise<NFTVaultConfigurationMapStructOutput>

  getNFTVaultData(asset: string, overrides?: CallOverrides): Promise<NFTVaultDataStructOutput>

  getNFTVaultsList(overrides?: CallOverrides): Promise<string[]>

  getReserveData(asset: string, overrides?: CallOverrides): Promise<ReserveDataStructOutput>

  getReserveNormalizedIncome(asset: string, overrides?: CallOverrides): Promise<BigNumber>

  getReserveNormalizedVariableDebt(asset: string, overrides?: CallOverrides): Promise<BigNumber>

  getReservesList(overrides?: CallOverrides): Promise<string[]>

  getUserAccountData(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalCollateralETH: BigNumber
      totalDebtETH: BigNumber
      availableBorrowsETH: BigNumber
      currentLiquidationThreshold: BigNumber
      ltv: BigNumber
      healthFactor: BigNumber
    }
  >

  getUserConfiguration(user: string, overrides?: CallOverrides): Promise<UserConfigurationMapStructOutput>

  initNFTVault(
    nft: string,
    nTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  initReserve(
    asset: string,
    aTokenAddress: string,
    stableDebtAddress: string,
    variableDebtAddress: string,
    interestRateStrategyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  initialize(
    provider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  repay(
    asset: string,
    amount: BigNumberish,
    rateMode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setConfiguration(
    asset: string,
    configuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setNFTVaultConfiguration(
    vault: string,
    configuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setPause(val: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setReserveInterestRateStrategyAddress(
    asset: string,
    rateStrategyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdraw(
    asset: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdrawNFT(
    nft: string,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    FLASHLOAN_PREMIUM_TOTAL(overrides?: CallOverrides): Promise<BigNumber>

    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>

    MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<BigNumber>

    MAX_STABLE_RATE_BORROW_SIZE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>

    borrow(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>

    deposit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    depositNFT(
      nft: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    finalizeNFTBatchTransfer(
      asset: string,
      from: string,
      to: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    finalizeNFTSingleTransfer(
      asset: string,
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    getAddressesProvider(overrides?: CallOverrides): Promise<string>

    getConfiguration(asset: string, overrides?: CallOverrides): Promise<ReserveConfigurationMapStructOutput>

    getNFTVaultConfiguration(asset: string, overrides?: CallOverrides): Promise<NFTVaultConfigurationMapStructOutput>

    getNFTVaultData(asset: string, overrides?: CallOverrides): Promise<NFTVaultDataStructOutput>

    getNFTVaultsList(overrides?: CallOverrides): Promise<string[]>

    getReserveData(asset: string, overrides?: CallOverrides): Promise<ReserveDataStructOutput>

    getReserveNormalizedIncome(asset: string, overrides?: CallOverrides): Promise<BigNumber>

    getReserveNormalizedVariableDebt(asset: string, overrides?: CallOverrides): Promise<BigNumber>

    getReservesList(overrides?: CallOverrides): Promise<string[]>

    getUserAccountData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralETH: BigNumber
        totalDebtETH: BigNumber
        availableBorrowsETH: BigNumber
        currentLiquidationThreshold: BigNumber
        ltv: BigNumber
        healthFactor: BigNumber
      }
    >

    getUserConfiguration(user: string, overrides?: CallOverrides): Promise<UserConfigurationMapStructOutput>

    initNFTVault(nft: string, nTokenAddress: string, overrides?: CallOverrides): Promise<void>

    initReserve(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    initialize(provider: string, overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    repay(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    setConfiguration(asset: string, configuration: BigNumberish, overrides?: CallOverrides): Promise<void>

    setNFTVaultConfiguration(vault: string, configuration: BigNumberish, overrides?: CallOverrides): Promise<void>

    setPause(val: boolean, overrides?: CallOverrides): Promise<void>

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(asset: string, amount: BigNumberish, to: string, overrides?: CallOverrides): Promise<BigNumber>

    withdrawNFT(
      nft: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>
  }

  filters: {
    'Borrow(address,address,uint256,uint256,uint256)'(
      reserve?: string | null,
      user?: null,
      amount?: null,
      borrowRateMode?: null,
      borrowRate?: null
    ): BorrowEventFilter
    Borrow(
      reserve?: string | null,
      user?: null,
      amount?: null,
      borrowRateMode?: null,
      borrowRate?: null
    ): BorrowEventFilter

    'Deposit(address,address,address,uint256)'(
      reserve?: string | null,
      user?: null,
      onBehalfOf?: string | null,
      amount?: null
    ): DepositEventFilter
    Deposit(reserve?: string | null, user?: null, onBehalfOf?: string | null, amount?: null): DepositEventFilter

    'DepositNFT(address,address,address,uint256[],uint256[])'(
      vault?: string | null,
      user?: null,
      onBehalfOf?: string | null,
      tokenIds?: null,
      amounts?: null
    ): DepositNFTEventFilter
    DepositNFT(
      vault?: string | null,
      user?: null,
      onBehalfOf?: string | null,
      tokenIds?: null,
      amounts?: null
    ): DepositNFTEventFilter

    'NFTVaultUsedAsCollateralDisabled(address,address)'(
      nftVault?: string | null,
      user?: string | null
    ): NFTVaultUsedAsCollateralDisabledEventFilter
    NFTVaultUsedAsCollateralDisabled(
      nftVault?: string | null,
      user?: string | null
    ): NFTVaultUsedAsCollateralDisabledEventFilter

    'NFTVaultUsedAsCollateralEnabled(address,address)'(
      nftVault?: string | null,
      user?: string | null
    ): NFTVaultUsedAsCollateralEnabledEventFilter
    NFTVaultUsedAsCollateralEnabled(
      nftVault?: string | null,
      user?: string | null
    ): NFTVaultUsedAsCollateralEnabledEventFilter

    'Paused()'(): PausedEventFilter
    Paused(): PausedEventFilter

    'Repay(address,address,uint256)'(reserve?: string | null, user?: string | null, amount?: null): RepayEventFilter
    Repay(reserve?: string | null, user?: string | null, amount?: null): RepayEventFilter

    'ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)'(
      reserve?: string | null,
      liquidityRate?: null,
      stableBorrowRate?: null,
      variableBorrowRate?: null,
      liquidityIndex?: null,
      variableBorrowIndex?: null
    ): ReserveDataUpdatedEventFilter
    ReserveDataUpdated(
      reserve?: string | null,
      liquidityRate?: null,
      stableBorrowRate?: null,
      variableBorrowRate?: null,
      liquidityIndex?: null,
      variableBorrowIndex?: null
    ): ReserveDataUpdatedEventFilter

    'Unpaused()'(): UnpausedEventFilter
    Unpaused(): UnpausedEventFilter

    'Withdraw(address,address,address,uint256)'(
      reserve?: string | null,
      user?: string | null,
      to?: string | null,
      amount?: null
    ): WithdrawEventFilter
    Withdraw(reserve?: string | null, user?: string | null, to?: string | null, amount?: null): WithdrawEventFilter

    'WithdrawNFT(address,address,address,uint256[],uint256[])'(
      vault?: string | null,
      user?: string | null,
      to?: string | null,
      tokenIds?: null,
      amounts?: null
    ): WithdrawNFTEventFilter
    WithdrawNFT(
      vault?: string | null,
      user?: string | null,
      to?: string | null,
      tokenIds?: null,
      amounts?: null
    ): WithdrawNFTEventFilter
  }

  estimateGas: {
    FLASHLOAN_PREMIUM_TOTAL(overrides?: CallOverrides): Promise<BigNumber>

    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>

    MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<BigNumber>

    MAX_STABLE_RATE_BORROW_SIZE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>

    borrow(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    deposit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    depositNFT(
      nft: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    finalizeNFTBatchTransfer(
      asset: string,
      from: string,
      to: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    finalizeNFTSingleTransfer(
      asset: string,
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getAddressesProvider(overrides?: CallOverrides): Promise<BigNumber>

    getConfiguration(asset: string, overrides?: CallOverrides): Promise<BigNumber>

    getNFTVaultConfiguration(asset: string, overrides?: CallOverrides): Promise<BigNumber>

    getNFTVaultData(asset: string, overrides?: CallOverrides): Promise<BigNumber>

    getNFTVaultsList(overrides?: CallOverrides): Promise<BigNumber>

    getReserveData(asset: string, overrides?: CallOverrides): Promise<BigNumber>

    getReserveNormalizedIncome(asset: string, overrides?: CallOverrides): Promise<BigNumber>

    getReserveNormalizedVariableDebt(asset: string, overrides?: CallOverrides): Promise<BigNumber>

    getReservesList(overrides?: CallOverrides): Promise<BigNumber>

    getUserAccountData(user: string, overrides?: CallOverrides): Promise<BigNumber>

    getUserConfiguration(user: string, overrides?: CallOverrides): Promise<BigNumber>

    initNFTVault(
      nft: string,
      nTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    initReserve(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    initialize(provider: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    repay(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setNFTVaultConfiguration(
      vault: string,
      configuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setPause(val: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdraw(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdrawNFT(
      nft: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    FLASHLOAN_PREMIUM_TOTAL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAX_STABLE_RATE_BORROW_SIZE_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    borrow(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    deposit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    depositNFT(
      nft: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    finalizeNFTBatchTransfer(
      asset: string,
      from: string,
      to: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    finalizeNFTSingleTransfer(
      asset: string,
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getAddressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getConfiguration(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getNFTVaultConfiguration(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getNFTVaultData(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getNFTVaultsList(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getReserveData(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getReserveNormalizedIncome(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getReserveNormalizedVariableDebt(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getReservesList(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getUserAccountData(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getUserConfiguration(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    initNFTVault(
      nft: string,
      nTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    initReserve(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    initialize(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    repay(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setNFTVaultConfiguration(
      vault: string,
      configuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setPause(val: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdrawNFT(
      nft: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
