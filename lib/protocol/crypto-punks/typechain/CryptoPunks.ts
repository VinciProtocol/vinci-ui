/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export interface CryptoPunksInterface extends utils.Interface {
  functions: {
    'name()': FunctionFragment
    'punksOfferedForSale(uint256)': FunctionFragment
    'enterBidForPunk(uint256)': FunctionFragment
    'totalSupply()': FunctionFragment
    'acceptBidForPunk(uint256,uint256)': FunctionFragment
    'decimals()': FunctionFragment
    'setInitialOwners(address[],uint256[])': FunctionFragment
    'withdraw()': FunctionFragment
    'imageHash()': FunctionFragment
    'nextPunkIndexToAssign()': FunctionFragment
    'punkIndexToAddress(uint256)': FunctionFragment
    'standard()': FunctionFragment
    'punkBids(uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'allInitialOwnersAssigned()': FunctionFragment
    'allPunksAssigned()': FunctionFragment
    'buyPunk(uint256)': FunctionFragment
    'transferPunk(address,uint256)': FunctionFragment
    'symbol()': FunctionFragment
    'withdrawBidForPunk(uint256)': FunctionFragment
    'setInitialOwner(address,uint256)': FunctionFragment
    'offerPunkForSaleToAddress(uint256,uint256,address)': FunctionFragment
    'punksRemainingToAssign()': FunctionFragment
    'offerPunkForSale(uint256,uint256)': FunctionFragment
    'getPunk(uint256)': FunctionFragment
    'pendingWithdrawals(address)': FunctionFragment
    'punkNoLongerForSale(uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'name'
      | 'punksOfferedForSale'
      | 'enterBidForPunk'
      | 'totalSupply'
      | 'acceptBidForPunk'
      | 'decimals'
      | 'setInitialOwners'
      | 'withdraw'
      | 'imageHash'
      | 'nextPunkIndexToAssign'
      | 'punkIndexToAddress'
      | 'standard'
      | 'punkBids'
      | 'balanceOf'
      | 'allInitialOwnersAssigned'
      | 'allPunksAssigned'
      | 'buyPunk'
      | 'transferPunk'
      | 'symbol'
      | 'withdrawBidForPunk'
      | 'setInitialOwner'
      | 'offerPunkForSaleToAddress'
      | 'punksRemainingToAssign'
      | 'offerPunkForSale'
      | 'getPunk'
      | 'pendingWithdrawals'
      | 'punkNoLongerForSale'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'punksOfferedForSale', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'enterBidForPunk', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'acceptBidForPunk',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setInitialOwners',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string
  encodeFunctionData(functionFragment: 'imageHash', values?: undefined): string
  encodeFunctionData(functionFragment: 'nextPunkIndexToAssign', values?: undefined): string
  encodeFunctionData(functionFragment: 'punkIndexToAddress', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'standard', values?: undefined): string
  encodeFunctionData(functionFragment: 'punkBids', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'allInitialOwnersAssigned', values?: undefined): string
  encodeFunctionData(functionFragment: 'allPunksAssigned', values?: undefined): string
  encodeFunctionData(functionFragment: 'buyPunk', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'transferPunk',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdrawBidForPunk', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'setInitialOwner',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'offerPunkForSaleToAddress',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'punksRemainingToAssign', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'offerPunkForSale',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'getPunk', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'pendingWithdrawals', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'punkNoLongerForSale', values: [PromiseOrValue<BigNumberish>]): string

  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'punksOfferedForSale', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'enterBidForPunk', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'acceptBidForPunk', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setInitialOwners', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'imageHash', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nextPunkIndexToAssign', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'punkIndexToAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'standard', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'punkBids', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allInitialOwnersAssigned', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allPunksAssigned', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buyPunk', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferPunk', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawBidForPunk', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setInitialOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'offerPunkForSaleToAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'punksRemainingToAssign', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'offerPunkForSale', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPunk', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pendingWithdrawals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'punkNoLongerForSale', data: BytesLike): Result

  events: {
    'Assign(address,uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'PunkTransfer(address,address,uint256)': EventFragment
    'PunkOffered(uint256,uint256,address)': EventFragment
    'PunkBidEntered(uint256,uint256,address)': EventFragment
    'PunkBidWithdrawn(uint256,uint256,address)': EventFragment
    'PunkBought(uint256,uint256,address,address)': EventFragment
    'PunkNoLongerForSale(uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Assign'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PunkTransfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PunkOffered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PunkBidEntered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PunkBidWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PunkBought'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PunkNoLongerForSale'): EventFragment
}

export interface AssignEventObject {
  to: string
  punkIndex: BigNumber
}
export type AssignEvent = TypedEvent<[string, BigNumber], AssignEventObject>

export type AssignEventFilter = TypedEventFilter<AssignEvent>

export interface TransferEventObject {
  from: string
  to: string
  value: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface PunkTransferEventObject {
  from: string
  to: string
  punkIndex: BigNumber
}
export type PunkTransferEvent = TypedEvent<[string, string, BigNumber], PunkTransferEventObject>

export type PunkTransferEventFilter = TypedEventFilter<PunkTransferEvent>

export interface PunkOfferedEventObject {
  punkIndex: BigNumber
  minValue: BigNumber
  toAddress: string
}
export type PunkOfferedEvent = TypedEvent<[BigNumber, BigNumber, string], PunkOfferedEventObject>

export type PunkOfferedEventFilter = TypedEventFilter<PunkOfferedEvent>

export interface PunkBidEnteredEventObject {
  punkIndex: BigNumber
  value: BigNumber
  fromAddress: string
}
export type PunkBidEnteredEvent = TypedEvent<[BigNumber, BigNumber, string], PunkBidEnteredEventObject>

export type PunkBidEnteredEventFilter = TypedEventFilter<PunkBidEnteredEvent>

export interface PunkBidWithdrawnEventObject {
  punkIndex: BigNumber
  value: BigNumber
  fromAddress: string
}
export type PunkBidWithdrawnEvent = TypedEvent<[BigNumber, BigNumber, string], PunkBidWithdrawnEventObject>

export type PunkBidWithdrawnEventFilter = TypedEventFilter<PunkBidWithdrawnEvent>

export interface PunkBoughtEventObject {
  punkIndex: BigNumber
  value: BigNumber
  fromAddress: string
  toAddress: string
}
export type PunkBoughtEvent = TypedEvent<[BigNumber, BigNumber, string, string], PunkBoughtEventObject>

export type PunkBoughtEventFilter = TypedEventFilter<PunkBoughtEvent>

export interface PunkNoLongerForSaleEventObject {
  punkIndex: BigNumber
}
export type PunkNoLongerForSaleEvent = TypedEvent<[BigNumber], PunkNoLongerForSaleEventObject>

export type PunkNoLongerForSaleEventFilter = TypedEventFilter<PunkNoLongerForSaleEvent>

export interface CryptoPunks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: CryptoPunksInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    name(overrides?: CallOverrides): Promise<[string]>

    punksOfferedForSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isForSale: boolean
        punkIndex: BigNumber
        seller: string
        minValue: BigNumber
        onlySellTo: string
      }
    >

    enterBidForPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    acceptBidForPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      minPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    setInitialOwners(
      addresses: PromiseOrValue<string>[],
      indices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    imageHash(overrides?: CallOverrides): Promise<[string]>

    nextPunkIndexToAssign(overrides?: CallOverrides): Promise<[BigNumber]>

    punkIndexToAddress(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>

    standard(overrides?: CallOverrides): Promise<[string]>

    punkBids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        hasBid: boolean
        punkIndex: BigNumber
        bidder: string
        value: BigNumber
      }
    >

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    allInitialOwnersAssigned(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    allPunksAssigned(overrides?: CallOverrides): Promise<[boolean]>

    buyPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferPunk(
      to: PromiseOrValue<string>,
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    withdrawBidForPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setInitialOwner(
      to: PromiseOrValue<string>,
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    offerPunkForSaleToAddress(
      punkIndex: PromiseOrValue<BigNumberish>,
      minSalePriceInWei: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    punksRemainingToAssign(overrides?: CallOverrides): Promise<[BigNumber]>

    offerPunkForSale(
      punkIndex: PromiseOrValue<BigNumberish>,
      minSalePriceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    pendingWithdrawals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    punkNoLongerForSale(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  name(overrides?: CallOverrides): Promise<string>

  punksOfferedForSale(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber, string] & {
      isForSale: boolean
      punkIndex: BigNumber
      seller: string
      minValue: BigNumber
      onlySellTo: string
    }
  >

  enterBidForPunk(
    punkIndex: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  acceptBidForPunk(
    punkIndex: PromiseOrValue<BigNumberish>,
    minPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  setInitialOwners(
    addresses: PromiseOrValue<string>[],
    indices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  imageHash(overrides?: CallOverrides): Promise<string>

  nextPunkIndexToAssign(overrides?: CallOverrides): Promise<BigNumber>

  punkIndexToAddress(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  standard(overrides?: CallOverrides): Promise<string>

  punkBids(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber] & {
      hasBid: boolean
      punkIndex: BigNumber
      bidder: string
      value: BigNumber
    }
  >

  balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  allInitialOwnersAssigned(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  allPunksAssigned(overrides?: CallOverrides): Promise<boolean>

  buyPunk(
    punkIndex: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferPunk(
    to: PromiseOrValue<string>,
    punkIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  withdrawBidForPunk(
    punkIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setInitialOwner(
    to: PromiseOrValue<string>,
    punkIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  offerPunkForSaleToAddress(
    punkIndex: PromiseOrValue<BigNumberish>,
    minSalePriceInWei: PromiseOrValue<BigNumberish>,
    toAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  punksRemainingToAssign(overrides?: CallOverrides): Promise<BigNumber>

  offerPunkForSale(
    punkIndex: PromiseOrValue<BigNumberish>,
    minSalePriceInWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getPunk(
    punkIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  pendingWithdrawals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  punkNoLongerForSale(
    punkIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    name(overrides?: CallOverrides): Promise<string>

    punksOfferedForSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isForSale: boolean
        punkIndex: BigNumber
        seller: string
        minValue: BigNumber
        onlySellTo: string
      }
    >

    enterBidForPunk(punkIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    acceptBidForPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      minPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    decimals(overrides?: CallOverrides): Promise<number>

    setInitialOwners(
      addresses: PromiseOrValue<string>[],
      indices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(overrides?: CallOverrides): Promise<void>

    imageHash(overrides?: CallOverrides): Promise<string>

    nextPunkIndexToAssign(overrides?: CallOverrides): Promise<BigNumber>

    punkIndexToAddress(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    standard(overrides?: CallOverrides): Promise<string>

    punkBids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        hasBid: boolean
        punkIndex: BigNumber
        bidder: string
        value: BigNumber
      }
    >

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    allInitialOwnersAssigned(overrides?: CallOverrides): Promise<void>

    allPunksAssigned(overrides?: CallOverrides): Promise<boolean>

    buyPunk(punkIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    transferPunk(
      to: PromiseOrValue<string>,
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    withdrawBidForPunk(punkIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    setInitialOwner(
      to: PromiseOrValue<string>,
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    offerPunkForSaleToAddress(
      punkIndex: PromiseOrValue<BigNumberish>,
      minSalePriceInWei: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    punksRemainingToAssign(overrides?: CallOverrides): Promise<BigNumber>

    offerPunkForSale(
      punkIndex: PromiseOrValue<BigNumberish>,
      minSalePriceInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    getPunk(punkIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    pendingWithdrawals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    punkNoLongerForSale(punkIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Assign(address,uint256)'(to?: PromiseOrValue<string> | null, punkIndex?: null): AssignEventFilter
    Assign(to?: PromiseOrValue<string> | null, punkIndex?: null): AssignEventFilter

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter

    'PunkTransfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      punkIndex?: null
    ): PunkTransferEventFilter
    PunkTransfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      punkIndex?: null
    ): PunkTransferEventFilter

    'PunkOffered(uint256,uint256,address)'(
      punkIndex?: PromiseOrValue<BigNumberish> | null,
      minValue?: null,
      toAddress?: PromiseOrValue<string> | null
    ): PunkOfferedEventFilter
    PunkOffered(
      punkIndex?: PromiseOrValue<BigNumberish> | null,
      minValue?: null,
      toAddress?: PromiseOrValue<string> | null
    ): PunkOfferedEventFilter

    'PunkBidEntered(uint256,uint256,address)'(
      punkIndex?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      fromAddress?: PromiseOrValue<string> | null
    ): PunkBidEnteredEventFilter
    PunkBidEntered(
      punkIndex?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      fromAddress?: PromiseOrValue<string> | null
    ): PunkBidEnteredEventFilter

    'PunkBidWithdrawn(uint256,uint256,address)'(
      punkIndex?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      fromAddress?: PromiseOrValue<string> | null
    ): PunkBidWithdrawnEventFilter
    PunkBidWithdrawn(
      punkIndex?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      fromAddress?: PromiseOrValue<string> | null
    ): PunkBidWithdrawnEventFilter

    'PunkBought(uint256,uint256,address,address)'(
      punkIndex?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<string> | null
    ): PunkBoughtEventFilter
    PunkBought(
      punkIndex?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<string> | null
    ): PunkBoughtEventFilter

    'PunkNoLongerForSale(uint256)'(punkIndex?: PromiseOrValue<BigNumberish> | null): PunkNoLongerForSaleEventFilter
    PunkNoLongerForSale(punkIndex?: PromiseOrValue<BigNumberish> | null): PunkNoLongerForSaleEventFilter
  }

  estimateGas: {
    name(overrides?: CallOverrides): Promise<BigNumber>

    punksOfferedForSale(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    enterBidForPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    acceptBidForPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      minPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    setInitialOwners(
      addresses: PromiseOrValue<string>[],
      indices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    imageHash(overrides?: CallOverrides): Promise<BigNumber>

    nextPunkIndexToAssign(overrides?: CallOverrides): Promise<BigNumber>

    punkIndexToAddress(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    standard(overrides?: CallOverrides): Promise<BigNumber>

    punkBids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    allInitialOwnersAssigned(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    allPunksAssigned(overrides?: CallOverrides): Promise<BigNumber>

    buyPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferPunk(
      to: PromiseOrValue<string>,
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    withdrawBidForPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setInitialOwner(
      to: PromiseOrValue<string>,
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    offerPunkForSaleToAddress(
      punkIndex: PromiseOrValue<BigNumberish>,
      minSalePriceInWei: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    punksRemainingToAssign(overrides?: CallOverrides): Promise<BigNumber>

    offerPunkForSale(
      punkIndex: PromiseOrValue<BigNumberish>,
      minSalePriceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    pendingWithdrawals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    punkNoLongerForSale(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    punksOfferedForSale(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    enterBidForPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    acceptBidForPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      minPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setInitialOwners(
      addresses: PromiseOrValue<string>[],
      indices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    imageHash(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nextPunkIndexToAssign(overrides?: CallOverrides): Promise<PopulatedTransaction>

    punkIndexToAddress(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    standard(overrides?: CallOverrides): Promise<PopulatedTransaction>

    punkBids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    allInitialOwnersAssigned(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    allPunksAssigned(overrides?: CallOverrides): Promise<PopulatedTransaction>

    buyPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferPunk(
      to: PromiseOrValue<string>,
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawBidForPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setInitialOwner(
      to: PromiseOrValue<string>,
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    offerPunkForSaleToAddress(
      punkIndex: PromiseOrValue<BigNumberish>,
      minSalePriceInWei: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    punksRemainingToAssign(overrides?: CallOverrides): Promise<PopulatedTransaction>

    offerPunkForSale(
      punkIndex: PromiseOrValue<BigNumberish>,
      minSalePriceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getPunk(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    pendingWithdrawals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    punkNoLongerForSale(
      punkIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
