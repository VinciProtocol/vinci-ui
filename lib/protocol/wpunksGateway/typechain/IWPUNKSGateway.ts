/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../common'

export interface IWPUNKSGatewayInterface extends utils.Interface {
  functions: {
    'depositAndLockPUNKS(address,uint256[],uint256[],address,uint16,uint16)': FunctionFragment
    'depositPUNKS(address,uint256[],uint256[],address,uint16)': FunctionFragment
    'withdrawPUNKS(address,uint256[],uint256[],address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'depositAndLockPUNKS',
    values: [string, BigNumberish[], BigNumberish[], string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'depositPUNKS',
    values: [string, BigNumberish[], BigNumberish[], string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawPUNKS',
    values: [string, BigNumberish[], BigNumberish[], string]
  ): string

  decodeFunctionResult(functionFragment: 'depositAndLockPUNKS', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositPUNKS', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawPUNKS', data: BytesLike): Result

  events: {}
}

export interface IWPUNKSGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IWPUNKSGatewayInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    depositAndLockPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      lockType: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    depositPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  depositAndLockPUNKS(
    lendingPool: string,
    punkIndices: BigNumberish[],
    amounts: BigNumberish[],
    onBehalfOf: string,
    lockType: BigNumberish,
    referralCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  depositPUNKS(
    lendingPool: string,
    punkIndices: BigNumberish[],
    amounts: BigNumberish[],
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdrawPUNKS(
    lendingPool: string,
    punkIndices: BigNumberish[],
    amounts: BigNumberish[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    depositAndLockPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      lockType: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    depositPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    depositAndLockPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      lockType: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    depositPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdrawPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    depositAndLockPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      lockType: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    depositPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdrawPUNKS(
      lendingPool: string,
      punkIndices: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
