/* Autogenerated file. Do not edit manually. */
/* tslint:disable */

import type { Signer, Overrides } from 'ethers'
import { utils, Contract, ContractFactory } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { WalletBalanceProvider, WalletBalanceProviderInterface } from './WalletBalanceProvider'

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'balanceOfNFT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'users',
        type: 'address[]',
      },
      {
        internalType: 'address[]',
        name: 'tokens',
        type: 'address[]',
      },
    ],
    name: 'batchBalanceOf',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'provider',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'getUserNFTTokens',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'underlyingNFT',
            type: 'address',
          },
          {
            internalType: 'uint256[]',
            name: 'tokenIds',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'amounts',
            type: 'uint256[]',
          },
        ],
        internalType: 'struct WalletBalanceProvider.UserNFTTokensData[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'provider',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'getUserWalletBalances',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b506110f5806100206000396000f3fe60806040526004361061004e5760003560e01c8063024053431461008857806328131a4b146100bf578063b59b28ef146100ec578063b5bb956514610119578063f7888aec1461014657610083565b366100835761005c33610166565b6100815760405162461bcd60e51b81526004016100789061105f565b60405180910390fd5b005b600080fd5b34801561009457600080fd5b506100a86100a3366004610d46565b61016c565b6040516100b6929190610f2c565b60405180910390f35b3480156100cb57600080fd5b506100df6100da366004610d46565b6106b4565b6040516100b6919061107b565b3480156100f857600080fd5b5061010c610107366004610d7e565b61076e565b6040516100b69190611025565b34801561012557600080fd5b50610139610134366004610d46565b61084a565b6040516100b69190610f8c565b34801561015257600080fd5b506100df610161366004610d46565b610bd4565b3b151590565b6060806000846001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101aa57600080fd5b505afa1580156101be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e29190610d2a565b90506000816001600160a01b031663d1946dbc6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021f57600080fd5b505afa158015610233573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261025b9190810190610de6565b90506000826001600160a01b03166304430b006040518163ffffffff1660e01b815260040160006040518083038186803b15801561029857600080fd5b505afa1580156102ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102d49190810190610de6565b9050600081518351600101016001600160401b03811180156102f557600080fd5b5060405190808252806020026020018201604052801561031f578160200160208202803683370190505b50905060005b835181101561036e5783818151811061033a57fe5b602002602001015182828151811061034e57fe5b6001600160a01b0390921660209283029190910190910152600101610325565b5073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8184518151811061039157fe5b6001600160a01b0390921660209283029190910190910152825160010160005b83518110156103fc578381815181106103c657fe5b602002602001015183838301815181106103dc57fe5b6001600160a01b03909216602092830291909101909101526001016103b1565b50600082516001600160401b038111801561041657600080fd5b50604051908082528060200260200182016040528015610440578160200160208202803683370190505b50905060005b8551811015610558576000876001600160a01b031663c44b11f786848151811061046c57fe5b60200260200101516040518263ffffffff1660e01b81526004016104909190610eff565b60206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e09190610e92565b905060006104ed82610c1e565b50505090508061051857600084848151811061050557fe5b6020026020010181815250505050610550565b6105358c87858151811061052857fe5b6020026020010151610bd4565b84848151811061054157fe5b60200260200101818152505050505b600101610446565b506105778973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610bd4565b8186518151811061058457fe5b6020908102919091010152815b81518110156106a1576000876001600160a01b031663d45f7e0c8684815181106105b757fe5b60200260200101516040518263ffffffff1660e01b81526004016105db9190610eff565b60206040518083038186803b1580156105f357600080fd5b505afa158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190610e92565b9050600061063882610c4a565b5090508061066157600084848151811061064e57fe5b6020026020010181815250505050610699565b61067e8c87858151811061067157fe5b60200260200101516106b4565b84848151811061068a57fe5b60200260200101818152505050505b600101610591565b50919650909450505050505b9250929050565b60006106c8826001600160a01b0316610166565b15610750576040516370a0823160e01b81526001600160a01b038316906370a08231906106f9908690600401610eff565b60206040518083038186803b15801561071157600080fd5b505afa158015610725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107499190610ead565b9050610768565b60405162461bcd60e51b815260040161007890611038565b92915050565b606060008483026001600160401b038111801561078a57600080fd5b506040519080825280602002602001820160405280156107b4578160200160208202803683370190505b50905060005b858110156108405760005b84811015610837576108128888848181106107dc57fe5b90506020020160208101906107f19190610d07565b8787848181106107fd57fe5b90506020020160208101906101619190610d07565b83518490848802840190811061082457fe5b60209081029190910101526001016107c5565b506001016107ba565b5095945050505050565b60606000836001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088757600080fd5b505afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf9190610d2a565b90506000816001600160a01b03166304430b006040518163ffffffff1660e01b815260040160006040518083038186803b1580156108fc57600080fd5b505afa158015610910573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109389190810190610de6565b9050600081516001600160401b038111801561095357600080fd5b5060405190808252806020026020018201604052801561098d57816020015b61097a610c62565b8152602001906001900390816109725790505b50905060005b82518110156108405760008282815181106109aa57fe5b602002602001015190508382815181106109c057fe5b60209081029190910101516001600160a01b0316815283516000908590849081106109e757fe5b60200260200101519050806001600160a01b03166370a08231896040518263ffffffff1660e01b8152600401610a1d9190610eff565b60206040518083038186803b158015610a3557600080fd5b505afa158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d9190610ead565b6001600160401b0381118015610a8257600080fd5b50604051908082528060200260200182016040528015610aac578160200160208202803683370190505b5060208301819052516001600160401b0381118015610aca57600080fd5b50604051908082528060200260200182016040528015610af4578160200160208202803683370190505b50604083015260005b826020015151811015610bc957604051632f745c5960e01b81526001600160a01b03831690632f745c5990610b38908c908590600401610f13565b60206040518083038186803b158015610b5057600080fd5b505afa158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b889190610ead565b83602001518281518110610b9857fe5b602002602001018181525050600183604001518281518110610bb657fe5b6020908102919091010152600101610afd565b505050600101610993565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610c0c57506001600160a01b03821631610768565b6106c8826001600160a01b0316610166565b51600160381b8116151591600160391b82161515916001603a1b81161515916001603b1b909116151590565b51600160381b8116151591600160391b909116151590565b604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b60008083601f840112610c9d578081fd5b5081356001600160401b03811115610cb3578182fd5b60208301915083602080830285010111156106ad57600080fd5b600060208284031215610cde578081fd5b604051602081016001600160401b0381118282101715610cfa57fe5b6040529151825250919050565b600060208284031215610d18578081fd5b8135610d23816110a7565b9392505050565b600060208284031215610d3b578081fd5b8151610d23816110a7565b60008060408385031215610d58578081fd5b8235610d63816110a7565b91506020830135610d73816110a7565b809150509250929050565b60008060008060408587031215610d93578182fd5b84356001600160401b0380821115610da9578384fd5b610db588838901610c8c565b90965094506020870135915080821115610dcd578384fd5b50610dda87828801610c8c565b95989497509550505050565b60006020808385031215610df8578182fd5b82516001600160401b0380821115610e0e578384fd5b818501915085601f830112610e21578384fd5b815181811115610e2d57fe5b8381029150610e3d848301611084565b8181528481019084860184860187018a1015610e57578788fd5b8795505b83861015610e855780519450610e70856110a7565b84835260019590950194918601918601610e5b565b5098975050505050505050565b600060208284031215610ea3578081fd5b610d238383610ccd565b600060208284031215610ebe578081fd5b5051919050565b6000815180845260208085019450808401835b83811015610ef457815187529582019590820190600101610ed8565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b82811015610f6e5781516001600160a01b031684529284019290840190600101610f49565b50505083810382850152610f828186610ec5565b9695505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561101757888303603f19018552815180516001600160a01b0316845287810151606089860181905290610fe982870182610ec5565b915050878201519150848103888601526110038183610ec5565b968901969450505090860190600101610fb0565b509098975050505050505050565b600060208252610d236020830184610ec5565b6020808252600d908201526c24a72b20a624a22faa27a5a2a760991b604082015260600190565b602080825260029082015261191960f11b604082015260600190565b90815260200190565b6040518181016001600160401b038111828210171561109f57fe5b604052919050565b6001600160a01b03811681146110bc57600080fd5b5056fea2646970667358221220adaac7f98d24516180418e97e9cfeca9ccb41ccc23534d40ce3f9f416958e17d64736f6c63430007060033'

type WalletBalanceProviderConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: WalletBalanceProviderConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1

export class WalletBalanceProvider__factory extends ContractFactory {
  constructor(...args: WalletBalanceProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<WalletBalanceProvider> {
    return super.deploy(overrides || {}) as Promise<WalletBalanceProvider>
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): WalletBalanceProvider {
    return super.attach(address) as WalletBalanceProvider
  }
  connect(signer: Signer): WalletBalanceProvider__factory {
    return super.connect(signer) as WalletBalanceProvider__factory
  }
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): WalletBalanceProviderInterface {
    return new utils.Interface(_abi) as WalletBalanceProviderInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): WalletBalanceProvider {
    return new Contract(address, _abi, signerOrProvider) as WalletBalanceProvider
  }
}
